{"version":3,"sources":["assets/background.jpg","components/CharacterCard.tsx","screens/Home/index.tsx","screens/App.tsx","index.tsx"],"names":["CharacterCard","character","onDelete","onEdit","Card","margin","bottom","style","position","height","width","background","Button","onClick","actor","primary","right","top","icon","Trash","color","hoverIndicator","left","Edit","CardBody","alt","objectFit","objectPosition","src","image","CardFooter","pad","name","house","memo","Home","props","hideModal","setState","showModal","state","isLoading","Axios","get","then","res","data","this","selectedCharacter","isUpdating","Box","BackgroundImage","backgroundPosition","fill","justify","overflow","gap","alignSelf","direction","wrap","Spinner","size","length","map","prevState","filter","Heading","Layer","animation","onEsc","onClickOutside","reverse","Close","elevation","round","CardHeader","level","FormField","label","TextInput","onChange","e","String","target","value","disabled","setTimeout","index","findIndex","_data","alert","_err","Component","App","Grommet","full","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab798e8b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/background.b6b50566.jpg\";","import { Button, Card, CardBody, CardFooter } from 'grommet';\nimport { Edit, Trash } from 'grommet-icons';\nimport { memo } from 'react';\nimport { Character } from '../models/Character';\n\ntype CharacterCardProps = {\n  character: Character;\n  onDelete: (actor: string) => any;\n  onEdit: (character: Character) => any;\n};\n\nconst CharacterCard = ({ character, onDelete, onEdit }: CharacterCardProps) => {\n  return (\n    <Card margin={{ bottom: 'medium' }} style={{ position: 'relative' }} key={character.actor} height=\"medium\" width=\"small\" background=\"light-1\">\n      <Button onClick={() => onDelete(character.actor)} primary style={{ position: 'absolute', right: 5, top: 5, background: '#4e411b44' }} icon={<Trash color=\"white\" />} hoverIndicator />\n\n      <Button onClick={() => onEdit(character)} primary style={{ position: 'absolute', left: 5, top: 5, background: '#4e411b44' }} icon={<Edit color=\"white\" />} hoverIndicator />\n\n      <CardBody>\n        <img alt=\"character\" style={{ objectFit: 'cover', objectPosition: 'center top' }} height=\"100%\" width=\"100%\" src={character.image} />\n      </CardBody>\n      <CardFooter height=\"xxsmall\" pad=\"small\" background=\"light-2\">\n        {character.name}\n        {character.house}\n      </CardFooter>\n    </Card>\n  );\n};\n\nexport default memo(CharacterCard);\n","import { Component } from 'react';\nimport Axios from 'axios';\nimport { Box, Button, Card, CardBody, CardHeader, FormField, Heading, Layer, Spinner, TextInput } from 'grommet';\nimport { Close } from 'grommet-icons';\nimport BackgroundImage from '../../assets/background.jpg';\nimport CharacterCard from '../../components/CharacterCard';\nimport { Character } from '../../models/Character';\n\ntype HomeState = {\n  isLoading: boolean;\n  showModal: boolean;\n  data?: Character[];\n  selectedCharacter?: Character;\n  isUpdating?: boolean;\n};\n\nexport default class Home extends Component<{}, HomeState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = { isLoading: true, showModal: false };\n  }\n\n  componentDidMount() {\n    Axios.get(`http://hp-api.herokuapp.com/api/characters`).then((res) => {\n      this.setState({ data: res.data, isLoading: false });\n    });\n  }\n\n  hideModal = () => this.setState({ showModal: false });\n  render() {\n    const { isLoading, showModal, data, selectedCharacter, isUpdating } = this.state;\n\n    return (\n      <Box pad={{ top: 'large' }} background={`url(${BackgroundImage})`} style={{ backgroundPosition: 'center' }} fill justify=\"center\">\n        <Box overflow=\"auto\" gap=\"large\" width=\"xlarge\" alignSelf=\"center\" direction=\"row\" justify=\"center\" wrap>\n          {/*        \n             isLoading ise Spinner render et deÄŸilse veri varsa gÃ¶ster yoksa veri yok yazÄ±sÄ± bas.\n           */}\n          {isLoading ? (\n            <Spinner color=\"primary\" size=\"xlarge\" />\n          ) : data && data.length ? (\n            this.state.data?.map((character) => (\n              <CharacterCard\n                character={character}\n                onEdit={(character) => {\n                  this.setState({ showModal: true, selectedCharacter: character });\n                }}\n                onDelete={(actor) => {\n                  this.setState((prevState) => ({\n                    data: prevState.data?.filter((character) => character.actor !== actor),\n                  }));\n                }}\n              />\n            ))\n          ) : (\n            <Heading>No Character Left ðŸ˜©</Heading>\n          )}\n        </Box>\n\n        {/* Modal KÄ±smÄ± */}\n        {showModal && (\n          <Box fill>\n            <Layer background=\"transparent\" animation=\"fadeIn\" onEsc={this.hideModal} onClickOutside={this.hideModal}>\n              <Button style={{ position: 'absolute', right: 10, top: 10 }} reverse icon={<Close size=\"30\" />} onClick={this.hideModal} />\n              <Card elevation=\"large\" width=\"large\" background=\"background-back\" round=\"small\">\n                <CardHeader justify=\"center\">\n                  <Heading margin={{ bottom: 'none' }} level={3}>\n                    {`Edit ${selectedCharacter?.name}`}\n                  </Heading>\n                </CardHeader>\n                <CardBody overflow=\"auto\" pad=\"medium\" gap=\"medium\" justify=\"start\" background=\"background-front\" margin=\"small\" round=\"small\" elevation=\"large\">\n                  <FormField label=\"Character Name\">\n                    {/* onChange fonksiyonuda statedeki selectedCharacterin ilgili alanÄ±n gÃ¼ncelle */}\n                    <TextInput onChange={(e) => this.setState({ selectedCharacter: { ...selectedCharacter!, name: String(e.target.value) } })} value={selectedCharacter?.name} />\n                  </FormField>\n                  <FormField label=\"House\">\n                    <TextInput onChange={(e) => this.setState({ selectedCharacter: { ...selectedCharacter!, house: String(e.target.value) } })} value={selectedCharacter?.house} />\n                  </FormField>\n                  <FormField label=\"Image\">\n                    <TextInput onChange={(e) => this.setState({ selectedCharacter: { ...selectedCharacter!, image: String(e.target.value) } })} value={selectedCharacter?.image} />\n                  </FormField>\n                  <Button\n                    disabled={isUpdating}\n                    onClick={() => {\n                      this.setState({ isUpdating: true });\n                      setTimeout(() => {\n                        try {\n                          const index = data?.findIndex((character) => character.actor === selectedCharacter!.actor)!;\n                          const _data = this.state.data!;\n                          _data[index] = selectedCharacter!;\n                          alert('Success');\n                          this.setState({ data: _data, isUpdating: false });\n                          this.hideModal();\n                        } catch (_err) {\n                          alert('An error occured.');\n                        }\n                      }, 3000);\n                    }}\n                    primary\n                    size=\"large\"\n                    label=\"Save\"\n                  />\n                </CardBody>\n              </Card>\n            </Layer>\n          </Box>\n        )}\n      </Box>\n    );\n  }\n}\n","import { Grommet } from 'grommet';\nimport Home from './Home';\n\nfunction App() {\n  return (\n    <Grommet full>\n      <Home />\n    </Grommet>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './screens/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}